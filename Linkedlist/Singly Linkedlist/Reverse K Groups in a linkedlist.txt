
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k <= 1) {
            return head;
        }

        int count = 0;
        ListNode currentNode = head;

        // Check if there are at least k nodes remaining
        while (currentNode != null && count < k) {
            currentNode = currentNode.next;
            count++;
        }

        if (count < k) {
            return head; // Not enough nodes to form a group, so no reversal needed
        }

        // Reverse the first k nodes in the group
        currentNode = head;
        ListNode prevNode = null;
        ListNode nextNode = null;

        for (int i = 0; i < k; i++) {
            nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        // Recursively reverse the rest of the list and link the two parts
        head.next = reverseKGroup(currentNode, k);

        // prevNode now points to the new head of the reversed group
        return prevNode;
    }
}








