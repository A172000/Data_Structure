import java.util.Scanner;

// Definition for a singly-linked list node

/* (Node creation snippet for singly Linkedlist) */
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
} 

/*  (Node creation snippet for Doubly Linkedlist) 

class ListNode {
    public int data;
    public ListNode next;
    public ListNode prev;

    ListNode() {
        this.data = 0;
        this.next = null;
        this.prev = null;
    }

    ListNode(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }

    ListNode(int data, ListNode next) {
        this.data = data;
        this.next = next;
        this.prev = next; // This line is incorrect. It should be this.prev = null;
    }
}
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prevNode = null;
        ListNode currentNode = head;


        while(currentNode != null)
        {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
        return prevNode;
    }
}
public class ReverseLinkedList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create a linked list based on user input
        System.out.print("Enter the number of nodes: ");
        int n = scanner.nextInt();

        ListNode head = null;
        ListNode tail = null;

        for (int i = 0; i < n; i++) {
            System.out.print("Enter the value of node " + (i+1) + ": ");
            int val = scanner.nextInt();

            ListNode newNode = new ListNode(val);

            if (head == null) {
                head = newNode;
                tail = newNode;
            } else {
                tail.next = newNode;
                tail = tail.next;
            }

/* If the linked list is empty (i.e., head is null), it means there are no nodes in the list, and we need to add the first node. In this case, we set both head and tail to point to the new node (newNode). This node becomes the first (and also the last) node in the linked list.

If the linked list is not empty (i.e., head is not null), it means there are already nodes in the list, and we need to add a new node at the end. In this case, we do the following:
a. tail.next = newNode; -> We make the next pointer of the current last node (i.e., tail) point to the new node (newNode). This connects the new node to the end of the current list.
b. tail = tail.next; -> After connecting the new node, we update the tail pointer to point to the newly added node. Now, the tail points to the last node of the updated linked list. */

        }

        Solution solution = new Solution();
        head = solution.reverseList(head);

        System.out.print("Reversed Linkedlist: ");
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next; }

        scanner.close();
    }
}
